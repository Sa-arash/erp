<?php

namespace App\Filament\Admin\Resources\AccountResource\Pages;

use App\Filament\Admin\Resources\AccountResource;
use App\Models\Account;
use Filament\Actions;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\CreateRecord;
use Filament\Support\Exceptions\Halt;
use Filament\Support\Facades\FilamentView;
use Illuminate\Support\Facades\Request;
use function Filament\Support\is_app_url;

class CreateAccount extends CreateRecord
{
    protected static string $resource = AccountResource::class;
    protected function getRedirectUrl(): string
    {
        return AccountResource::getUrl('index'); // TODO: Change the autogenerated stub
    }


    public function create(bool $another = false): void
    {
        $this->authorizeAccess();

        try {
            $this->beginDatabaseTransaction();

            $this->callHook('beforeValidate');

            $data = $this->form->getState();

            $this->callHook('afterValidate');



            $data = $this->mutateFormDataBeforeCreate($data);

            $this->callHook('beforeCreate');


            $account = Account::query()->firstWhere('id', $data['parent_id']);

            if ($account) {
                $data['code'] = $account->code . $data['code'];
                $exits = Account::query()->where('company_id',getCompany()->id)->where('code', $data['code'])->first();

                if ($exits){
                    Notification::make('error')->danger()->title('Account Code Exists')->send();
                    return;
                }

                $level = "group";
                switch ($account->level) {
                    case "main":
                        $level = "group";
                        break;
                    case "group":
                        $level = "general";
                        break;
                    case "general":
                        $level = "subsidiary";
                        break;
                    case "subsidiary":
                        $level = "detail";
                        break;
                }
                $data['level'] = $level;
            }


            $this->record = $this->handleRecordCreation($data);

            $this->form->model($this->getRecord())->saveRelationships();

            $this->callHook('afterCreate');

            $this->commitDatabaseTransaction();
        } catch (Halt $exception) {
            $exception->shouldRollbackDatabaseTransaction() ?
                $this->rollBackDatabaseTransaction() :
                $this->commitDatabaseTransaction();

            return;
        } catch (Throwable $exception) {
            $this->rollBackDatabaseTransaction();

            throw $exception;
        }

        $this->rememberData();

        $this->getCreatedNotification()?->send();

        if ($another) {
            // Ensure that the form record is anonymized so that relationships aren't loaded.
            $this->form->model($this->getRecord()::class);
            $this->record = null;

            $this->fillForm();

            return;
        }

        $redirectUrl = $this->getRedirectUrl();

        $this->redirect($redirectUrl, navigate: FilamentView::hasSpaMode() && is_app_url($redirectUrl));
    }


}
