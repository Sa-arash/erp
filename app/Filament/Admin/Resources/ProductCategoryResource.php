<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\ProductCategoryResource\Pages;
use App\Filament\Admin\Resources\ProductCategoryResource\RelationManagers;
use App\Filament\Clusters\StackManagementSettings;
use App\Models\Account;
use App\Models\ProductCategory;
use CodeWithDennis\FilamentSelectTree\SelectTree;
use Filament\Actions\Action;
use Filament\Forms;
use Filament\Forms\Components\Select;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\Request;

class ProductCategoryResource extends Resource
{
    protected static ?string $model = ProductCategory::class;
    protected static ?string $label = 'Category';
    protected static ?string $navigationGroup = 'Stock Management';
    protected static ?string $navigationIcon = 'heroicon-c-server-stack';
    public static function canAccess(): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    protected static ?string $cluster = StackManagementSettings::class;
    public static function form(Form $form): Form
    {

        return $form
            ->schema([
                Forms\Components\TextInput::make('title')->label('Category')->required()->maxLength(255),
                Forms\Components\TextInput::make('CategoryID')->label('Category ID')->required(),
                Forms\Components\Fieldset::make('Account')->visible(fn($state) => isset($state['id']))->relationship('account')->schema([
                    Forms\Components\TextInput::make('name')->required()->maxLength(255),
                    SelectTree::make('parent_id')->live()->label('Parent')->disabledOptions(function () {
                        return Account::query()->whereIn('level', ['detail', 'subsidiary'])->pluck('id')->toArray();
                    })->defaultOpenLevel(1)->searchable()->enableBranchNode()->relationship('Account', 'name', 'parent_id', modifyQueryUsing: fn($query) => $query->where('stamp', "Assets")->where('company_id', getCompany()->id))
                        ->afterStateUpdated(function ($state, callable $set) {
                            $set('type', Account::query()->firstWhere('id', $state)->type);
                        }),
                    Forms\Components\TextInput::make('code')->formatStateUsing(function ($state, Get $get) {
                        $account = Account::query()->firstWhere('id', $get('parent_id'));
                        if ($account?->code) {
                            $state = str_replace($account?->code, '', $state);
                        }

                        return $state;
                    })->prefix(fn(Get $get) => Account::query()->firstWhere('id', $get('parent_id'))?->code)->required()->maxLength(255),
                    Forms\Components\Select::make('level')->disabled()->required()->options(['general' => 'General Ledger Account', 'subsidiary' => 'Subsidiary Ledger Account', 'detail' => 'Detail Account'])->searchable()->preload(),

                    Forms\Components\ToggleButtons::make('type')->grouped()->inline()->options(['creditor' => 'Creditor', 'debtor' => 'Debtor'])->required(),
                    Forms\Components\Textarea::make('description')->maxLength(255)->columnSpanFull(),
                ]),
            ]);

    }

    public static function table(Table $table): Table
    {

        return $table
            ->columns([
                Tables\Columns\TextColumn::make('')->rowIndex(),
                Tables\Columns\TextColumn::make('title')->label('Category')->searchable(),
                Tables\Columns\TextColumn::make('CategoryID')->label('Category ID ')->numeric()->sortable(),
                Tables\Columns\TextColumn::make('account.code')->badge()->url(fn($record)=>AccountResource::getUrl('index',['tableSearch'=>$record->account?->code])),
                Tables\Columns\TextColumn::make('Product')->label('Quantity')->url(fn($record) => ProductResource::getUrl('index', ['tableFilters[category_id][value]' => $record->id]))->color('aColor')->badge()->alignCenter()->state(fn ($record)=>number_format($record->products->map(fn($item)=>$item->assets->count())->sum()))->url(fn($record) => ProductResource::getUrl() . '?tableFilters[product_category_id][value]=' . $record->id),
            ])
            ->filters([
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }


    public static function getPages(): array
    {
        return [
            'index' => Pages\ListProductCategories::route('/'),
            'create' => Pages\CreateProductCategory::route('/create'),
            'edit' => Pages\EditProductCategory::route('/{record}/edit'),
        ];
    }
}
