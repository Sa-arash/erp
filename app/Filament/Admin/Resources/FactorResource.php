<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\FactorResource\Pages;
use App\Filament\Admin\Resources\FactorResource\RelationManagers;
use App\Filament\Clusters\FinanceSettings;
use App\Models\Account;
use App\Models\Currency;
use App\Models\Factor;
use App\Models\FinancialPeriod;
use App\Models\Parties;
use App\Models\Transaction;
use App\Models\Unit;
use Closure;
use CodeWithDennis\FilamentSelectTree\SelectTree;
use Filament\Forms;
use Filament\Forms\Components\Component;
use Filament\Forms\Components\Group;
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\ToggleButtons;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Support\RawJs;
use Filament\Tables;
use Filament\Tables\Table;
use Hamcrest\Core\Set;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use function Illuminate\Events\queueable;

class FactorResource extends Resource
{
    protected static ?string $model = Factor::class;
    protected static ?string $label = 'Invoice';
    protected static ?string $pluralLabel = 'Invoices';
    protected static ?string $navigationGroup = 'Finance Management';
    protected static ?string $navigationIcon = 'heroicon-s-document-currency-dollar';

    // public static function canAccess(): bool
    // {
    //     return getPeriod()?->id !== null; // TODO: Change the autogenerated stub
    // }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Wizard::make([
                    Forms\Components\Wizard\Step::make('Invoice')->schema([
                        Forms\Components\Section::make([
                            Forms\Components\TextInput::make('title')->required()->maxLength(255),
                            Forms\Components\ToggleButtons::make('type')->live()->afterStateUpdated(function (Forms\Set $set, string $operation) {
                                $set('party_id', null);
                                $set('account_id', null);
                                $set('to', null);
                                $set('from', null);
                                if ($operation == "create") {
                                    $set('invoice.transactions', []);
                                }
                            })->required()->default(0)->boolean('Income', 'Expense')->grouped(),
                            Forms\Components\Select::make('account_id')->label(fn(Forms\Get $get) => $get('type') === "1" ? "Income Account" : "Expense Account")->searchable()->required()->options(function (Forms\Get $get) {
                                $type = $get('type') === "1" ? "Income" : "Expense";
                                return getCompany()->accounts->whereIn('group', [$type])->pluck('name', 'id');
                            })->afterStateUpdated(function ($state, Forms\Set $set, Forms\Get $get) {
                                $party = Parties::query()->firstWhere('id', $state);
                                if ($get('type') !== "1") {
                                    $set('to', getCompany()->AccountTitle);
                                } else {
                                    $set('from', getCompany()->AccountTitle);
                                }
                            })->live(true),


                            Forms\Components\Select::make('party_id')->label(fn(Forms\Get $get) => $get('type') === "1" ? "Customer" : "Vendor")->searchable()->required()->options(function (Forms\Get $get) {
                                $type = $get('type') === "1" ? "customer" : "vendor";
                                return getCompany()->parties->whereIn('type', [$type, 'both'])->pluck('info', 'id');
                            })->afterStateUpdated(function ($state, Forms\Set $set, Forms\Get $get) {
                                $party = Parties::query()->firstWhere('id', $state);
                                if ($get('type') === "1") {
                                    $set('to', $party?->name);
                                } else {
                                    $set('from', $party?->name);
                                }
                            })->live(true),

                                SelectTree::make('parent_customer')->visible(function (Forms\Get $get) {
                                    if ($get('type') == "both") {
                                        if ($get("account_customer")===null){
                                            return true;
                                        }
                                    } elseif ($get('type') == "customer") {
                                        if ($get("account_customer") === null) {
                                            return true;
                                        }
                                    } else {
                                        return false;
                                    }
                                })->default(getCompany()?->customer_account)->disabledOptions(function ($state, SelectTree $component) {
                                    return Account::query()->where('level', 'detail')->where('company_id', getCompany()->id)->orWhereHas('transactions',function ($query){})->pluck('id')->toArray();
                                })->enableBranchNode()->model(Transaction::class)->defaultOpenLevel(3)->live()->label('Parent Customer Account')->required()->relationship('Account', 'name', 'parent_id', modifyQueryUsing: fn($query) => $query->where('stamp', "Assets")->where('company_id', getCompany()->id)),
                                Forms\Components\TextInput::make('account_code_vendor')
                                    ->prefix(fn(Get $get)=>Account::find($get('parent_vendor'))?->code)
                                    ->default(function () {
                                        if (Parties::query()->where('company_id', getCompany()->id)->where('type', 'vendor')->latest()->first()) {
                                            return generateNextCode(Parties::query()->where('company_id', getCompany()->id)->where('type', 'vendor')->latest()->first()->account_code_vendor);
                                        } else {
                                            return "001";
                                        }

                                    })->unique('accounts','code',ignoreRecord: true)->visible(function (Forms\Get $get) {

                                        if ($get('type') == "both") {
                                            if ($get("account_vendor") === null) {
                                                return true;
                                            }
                                        } elseif ($get('type') == "vendor") {
                                            if ($get("account_vendor") === null) {
                                                return true;
                                            }
                                        } else {
                                            return false;
                                        }

                                    })->required()->tel()->maxLength(255),
                                Forms\Components\TextInput::make('account_code_customer')->unique('accounts','code',ignoreRecord: true)
                                    ->prefix(fn(Get $get)=>Account::find($get('parent_customer'))?->code)
                                    ->default(function () {
                                        if (Parties::query()->where('company_id', getCompany()->id)->where('type', 'customer')->latest()->first()) {
                                            return generateNextCode(Parties::query()->where('company_id', getCompany()->id)->where('type', 'customer')->latest()->first()->account_code_customer);
                                        } else {
                                            return "001";
                                        }

                                    })->visible(function (Forms\Get $get) {
                                        if ($get('type') === "both") {
                                            if ($get("account_customer") === null) {
                                                return true;
                                            }
                                        } elseif ($get('type') === "customer") {
                                            if ($get("account_customer") === null) {
                                                return true;
                                            }
                                        } else {
                                            return false;
                                        }
                                    })->required()->tel()->maxLength(255),
                                Forms\Components\Fieldset::make('Account Vendor')->visible(fn($state)=>isset($state['id']))->relationship('accountVendor')->schema([
                                    Forms\Components\TextInput::make('name')->required()->maxLength(255),
                                    SelectTree::make('parent_id')->live()->label('Parent')->disabledOptions(function ($state, SelectTree $component) {
                                        return Account::query()->where('level', 'detail')->orWhereHas('transactions',function ($query){})->pluck('id')->toArray();
                                    })->defaultOpenLevel(1)->searchable()->enableBranchNode()->relationship('Account', 'name', 'parent_id', modifyQueryUsing: fn($query) => $query->where('stamp', "Liabilities")->where('company_id', getCompany()->id))
                                        ->afterStateUpdated(function ($state, callable $set) {
                                            $set('type', Account::query()->firstWhere('id', $state)->type);
                                        }),
                                    Forms\Components\TextInput::make('code')->unique('accounts','code',ignoreRecord: true)->required()->maxLength(255),
                                    ToggleButtons::make('type')->disabled()->grouped()->inline()->options(['creditor' => 'Creditor', 'debtor' => 'Debtor'])->required(),
                                    ToggleButtons::make('group')->disabled()->grouped()->options(['Asset'=>'Asset','Liabilitie'=>'Liabilitie','Equity'=>'Equity','Income'=>'Income','Expense'=>'Expense'])->inline(),
                                    Forms\Components\Textarea::make('description')->maxLength(255)->columnSpanFull(),
                                ]),
                                Forms\Components\Fieldset::make('Account Customer')->visible(fn($state)=>isset($state['id']))->relationship('accountCustomer')->schema([
                                    Forms\Components\TextInput::make('name')->required()->maxLength(255),
                                    SelectTree::make('parent_id')->live()->label('Parent')->disabledOptions(function ($state, SelectTree $component) {
                                        return Account::query()->where('level', 'detail')->orWhereHas('transactions',function ($query){})->pluck('id')->toArray();
                                    })->defaultOpenLevel(1)->searchable()->enableBranchNode()->relationship('Account', 'name', 'parent_id', modifyQueryUsing: fn($query) => $query->where('stamp', "Assets")->where('company_id', getCompany()->id))
                                        ->afterStateUpdated(function ($state, callable $set) {
                                            $set('type', Account::query()->firstWhere('id', $state)->type);
                                        }),
                                    Forms\Components\TextInput::make('code')->unique('accounts','code',ignoreRecord: true)->required()->maxLength(255),
                                    ToggleButtons::make('type')->disabled()->grouped()->inline()->options(['creditor' => 'Creditor', 'debtor' => 'Debtor'])->required(),
                                    ToggleButtons::make('group')->disabled()->grouped()->options(['Asset'=>'Asset','Liabilitie'=>'Liabilitie','Equity'=>'Equity','Income'=>'Income','Expense'=>'Expense'])->inline(),
                                    Forms\Components\Textarea::make('description')->maxLength(255)->columnSpanFull(),
                                ]),
                            ]),

                        ])->columns(2),
                        Forms\Components\TextInput::make('from')->required()->maxLength(255),
                        Forms\Components\TextInput::make('to')->required()->maxLength(255),
                        Forms\Components\Repeater::make('items')->required()->relationship('items')->schema([
                            Forms\Components\TextInput::make('title')->required()->label('Invoice Item')->columnSpan(2),
                            Forms\Components\TextInput::make('quantity')->default(1)->numeric()->live(true)->required()->label('Quantity')->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                                $count = $get('quantity') === null ? 0 : (float)$get('quantity');
                                $unitPrice = $get('unit_price') === null ?  0 : (float)str_replace(',', '', $get('unit_price'));
                                $discount = $get('discount') === null ?  0 : (float)$get('discount');
                                $set('total', number_format(($count * $unitPrice) - (($count * $unitPrice) * $discount) / 100, 2));
                            }),
                            Forms\Components\Select::make('unit_id')->label('Unit')->required()->options(Unit::query()->where('company_id', getCompany()->id)->pluck('title', 'id'))->searchable()->preload(),
                            Forms\Components\TextInput::make('unit_price')->prefix(defaultCurrency()?->symbol)->default(0)->rules([
                                fn(): Closure => function (string $attribute, $value, Closure $fail) {
                                    if ($value <= 0) {
                                        $fail('The :attribute is invalid.');
                                    }
                                },
                            ])->mask(RawJs::make('$money($input)'))->stripCharacters(',')->live(true)->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                                $count = $get('quantity') === null ? 0 : (float)$get('quantity');
                                $unitPrice = $get('unit_price') === null ?  0 : (float)str_replace(',', '', $get('unit_price'));
                                $discount = $get('discount') === null ?  0 : (float)$get('discount');
                                $set('total', number_format(($count * $unitPrice) - (($count * $unitPrice) * $discount) / 100, 2));
                            })->required()->label('Unit Price'),
                            Forms\Components\TextInput::make('discount')->numeric()->live(true)->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                                $count = $get('quantity') === null ? 0 : (float)$get('quantity');
                                $unitPrice = $get('unit_price') === null ?  0 : (float)str_replace(',', '', $get('unit_price'));
                                $discount = $get('discount') === null ?  0 : (float)$get('discount');
                                $set('total', number_format(($count * $unitPrice) - (($count * $unitPrice) * $discount) / 100, 2));
                            })->default(0)->required()->label('Discount'),
                            Forms\Components\TextInput::make('total')->prefix(defaultCurrency()?->symbol)->live()->readOnly()->default(0)->required()->label('Total'),
                        ])->columnSpanFull()->columns(7),
                    ])->columns(2),
                    Forms\Components\Wizard\Step::make('journal')->label('Journal Entry')->schema([

                        Group::make()->relationship('invoice')->schema([

                            Forms\Components\Hidden::make('company_id')->default(getCompany()->id)->required(),
                            Forms\Components\Section::make([
                                Forms\Components\TextInput::make('number')
                                    ->columnSpan(1)
                                    ->default(getCompany()->financialPeriods()->where('status', "During")?->first()?->invoices()?->get()->last()?->number != null ? getCompany()->financialPeriods()->where('status', "During")->first()->invoices()->get()->last()->number + 1 : 1)->label('Voucher Number')->required()->maxLength(255)->readOnly(),
                                Forms\Components\TextInput::make('name')
                                    ->columnSpan(3)
                                    ->label('Voucher Title')->required()->maxLength(255),
                                Forms\Components\TextInput::make('reference')
                                    ->columnSpan(1)
                                    ->maxLength(255),
                                Forms\Components\DateTimePicker::make('date')
                                    ->columnSpan(2)
                                    ->required()->default(now()),
                                Forms\Components\FileUpload::make('document')->placeholder('Browse')->extraInputAttributes(['style' => 'height:30px!important;'])
                                    ->nullable(),
                                Placeholder::make('total :')->live()->content(function (Get $get) {
                                    if ($get->getData()['items']) {
                                        $produtTotal = array_map(function ($item) {
                                            // dd($item);
                                            try {
                                                //code...
                                                // return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) + (($item['quantity'] * str_replace(',', '', $item['unit_price']) * $item['taxes']) / 100,2) + (($item['quantity'] * str_replace(',', '', $item['unit_price']) * $item['freights']) / 100,2));
                                                return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price'])) * $item['discount']) / 100);
                                            } catch (\Throwable $th) {
                                                //throw $th;
                                                return null;
                                            }
                                        }, $get->getData()['items']);

                                        return  collect($produtTotal)->sum() ? number_format(collect($produtTotal)->sum(), 2) . defaultCurrency()?->symbol : '?';
                                    }
                                })->inlineLabel()
                            ])->columns(8),

                            Forms\Components\Section::make([
                                Forms\Components\Repeater::make('transactions')->label('')->relationship('transactions')->schema([
                                    Forms\Components\Hidden::make('company_id')->default(getCompany()->id)->required(),
                                    SelectTree::make('account_id')->formatStateUsing(function ($state, Forms\Set $set) {
                                        $account = Account::query()->where('id', $state)->whereNot('currency_id', defaultCurrency()?->id)->first();
                                        if ($account) {
                                            $set('currency_id', $account->currency_id);
                                            $set('exchange_rate', number_format($account->currency->exchange_rate));
                                            $set('isCurrency', 1);
                                            return $state;
                                        }
                                        $set('isCurrency', 0);
                                        return $state;
                                    })->afterStateUpdated(function ($state, Forms\Set $set) {
                                        $query = Account::query()->find($state);
                                        // dd($query);
                                        if ($query) {
                                            if($query->type == 'debtor')
                                            {
                                                $set('cheque.type', 0);
                                            }else{
                                                $set('cheque.type', 1);
                                            }
                                            if ($query->has_cheque == 1) {
                                                $set('Cheque', true);
                                            } else {
                                                $set('Cheque', false);
                                            }
                                        } else {
                                            $set('Cheque', false);
                                        }

                                        $account = Account::query()->where('id', $state)->whereNot('currency_id', defaultCurrency()?->id)->first();
                                        if ($account) {
                                            $set('currency_id', $account->currency_id);
                                            $set('exchange_rate', number_format($account->currency->exchange_rate));
                                            return $set('isCurrency', 1);
                                        }
                                        return $set('isCurrency', 0);
                                    })->live()->defaultOpenLevel(3)->live()->label('Account')->required()->relationship('Account', 'name', 'parent_id', modifyQueryUsing: fn($query) => $query->where('level', '!=', 'control')->where('company_id', getCompany()->id))->searchable(),
                                    Forms\Components\TextInput::make('description')->required(),

                                    Forms\Components\TextInput::make('debtor')->prefix(defaultCurrency()->symbol)->live(true)->afterStateUpdated(function ($state, Forms\Set $set, Get $get) {
                                        if ($get('Cheque')) {
                                            $set('cheque.amount', $state);
                                        }
                                    })->mask(RawJs::make('$money($input)'))->readOnly(function (Get $get) {
                                        return $get('isCurrency') || $get->getData()['type'] !== "1";
                                    })->stripCharacters(',')->suffixIcon('cash')->suffixIconColor('success')->required()->default(0)->minValue(0)
                                        ->rules([
                                            fn(Get $get): Closure => function (string $attribute, $value, Closure $fail, $operation) use ($get) {
                                                if ($operation == "create") {

                                                    if ($get->getData()['type'] === "1") {


                                                        if ($get('debtor') == 0) {
                                                            $fail('The debtor field must be not zero.');
                                                        } else {

                                                            // dd(()));
                                                            $produtTotal = array_map(function ($item) {
                                                                // dd($item);
                                                                return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price'])) * $item['discount']) / 100);
                                                            }, $get->getData()['items']);

                                                            $invoiceTotal = array_map(function ($item) {
                                                                // dd($item);
                                                                return (str_replace(',', '', $item['debtor']));
                                                            }, $get->getData()['invoice']['transactions']);

                                                            $productSum = collect($produtTotal)->sum();
                                                            $invoiceSum = collect($invoiceTotal)->sum();

                                                            if ($invoiceSum != $productSum) {
                                                                $remainingAmount = $productSum - $invoiceSum;
                                                                $fail("The paid amount does not match the total price. Total amount:" . number_format($productSum, 2) . ", Remaining amount: " . number_format($remainingAmount, 2));
                                                            }
                                                        }
                                                    } elseif ($get('debtor') != 0) {
                                                        $fail('The debtor field must be zero.');
                                                    }
                                                } else {
                                                    if ($get('debtor') == 0 && $get('creditor') == 0) {
                                                        $fail('Only one of these values can be zero.');
                                                    } elseif ($get('debtor') != 0 && $get('creditor') != 0) {
                                                        $fail('At least one of the values must be zero.');
                                                    }
                                                }

                                            },

                                        ]),
                                    Forms\Components\TextInput::make('creditor')->prefix(defaultCurrency()->symbol)->readOnly(function (Get $get) {
                                        return $get('isCurrency') || $get->getData()['type'] === "1";
                                    })->live(true)
                                        ->afterStateUpdated(function ($state, Forms\Set $set, Get $get) {
                                            if ($get('Cheque')) {
                                                $set('cheque.amount', $state);
                                            }
                                        })
                                        ->mask(RawJs::make('$money($input)'))->stripCharacters(',')
                                        ->suffixIcon('cash')->suffixIconColor('success')->required()->default(0)->minValue(0)
                                        ->rules([
                                            fn(Get $get): Closure => function (string $attribute, $value, Closure $fail, $operation) use ($get) {

                                                if ($operation == "create") {


                                                    if ($get->getData()['type'] !== "1") {



                                                        if ($get('creditor') == 0) {
                                                            $fail('The creditor field must be not zero.');
                                                        } else {

                                                            // dd(()));
                                                            $produtTotal = array_map(function ($item) {
                                                                // dd($item);
                                                                return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price'])) * $item['discount']) / 100);
                                                            }, $get->getData()['items']);

                                                            $invoiceTotal = array_map(function ($item) {
                                                                // dd($item);
                                                                return (str_replace(',', '', $item['creditor']));
                                                            }, $get->getData()['invoice']['transactions']);

                                                            $productSum = collect($produtTotal)->sum();
                                                            $invoiceSum = collect($invoiceTotal)->sum();

                                                            if ($invoiceSum != $productSum) {
                                                                $remainingAmount = $productSum - $invoiceSum;
                                                                $fail("The paid amount does not match the total price. Total amount:" . number_format($productSum, 2) . ", Remaining amount: " . number_format($remainingAmount, 2));
                                                            }
                                                        }
                                                    } elseif ($get('creditor') != 0) {
                                                        $fail('The creditor field must be zero.');
                                                    }
                                                } else {
                                                    if ($get('debtor') == 0 && $get('creditor') == 0) {
                                                        $fail('Only one of these values can be zero.');
                                                    } elseif ($get('debtor') != 0 && $get('creditor') != 0) {
                                                        $fail('At least one of the values must be zero.');
                                                    }
                                                }
                                            },
                                        ]),
                                    Forms\Components\Hidden::make('isCurrency'),
                                    Forms\Components\Hidden::make('currency_id')->default(defaultCurrency()?->id)->hidden(function (Get $get) {
                                        return $get('isCurrency');
                                    }),
                                    Section::make([
                                        Select::make('currency_id')->live()->label('Currency')->required()->relationship('currency', 'name', modifyQueryUsing: fn($query) => $query->where('company_id', getCompany()->id))->searchable()->preload()->createOptionForm([
                                            Section::make([
                                                TextInput::make('name')->required()->maxLength(255),
                                                TextInput::make('symbol')->required()->maxLength(255),
                                                TextInput::make('exchange_rate')->required()->numeric()->mask(RawJs::make('$money($input)'))->stripCharacters(','),
                                            ])->columns(3)
                                        ])->createOptionUsing(function ($data) {
                                            $data['company_id'] = getCompany()->id;
                                            Notification::make('success')->title('success')->success()->send();
                                            return Currency::query()->create($data)->getKey();
                                        })->editOptionForm([
                                            Section::make([
                                                TextInput::make('name')->required()->maxLength(255),
                                                TextInput::make('symbol')->required()->maxLength(255),
                                                TextInput::make('exchange_rate')->required()->numeric()->mask(RawJs::make('$money($input)'))->stripCharacters(','),
                                            ])->columns(3)
                                        ])->afterStateUpdated(function ($state, Forms\Set $set) {
                                            $currency = Currency::query()->firstWhere('id', $state);
                                            if ($currency) {
                                                $set('exchange_rate', $currency->exchange_rate);
                                            }
                                        })->editOptionAction(function ($state, Forms\Set $set) {
                                            $currency = Currency::query()->firstWhere('id', $state);
                                            if ($currency) {
                                                $set('exchange_rate', $currency->exchange_rate);
                                            }
                                        }),
                                        TextInput::make('exchange_rate')->default(defaultCurrency()->exchange_rate)->required()->mask(RawJs::make('$money($input)'))->stripCharacters(','),
                                        Forms\Components\TextInput::make('debtor_foreign')
                                            ->readOnly(fn(Get $get) => $get->getData()['type'] !== "1")
                                            ->live(true)->afterStateUpdated(function ($state, Get $get, Forms\Set $set) {
                                                $set('debtor', number_format((float) str_replace(',', '', $state) * (float) str_replace(',', '', $get('exchange_rate'))));
                                            })->mask(RawJs::make('$money($input)'))->stripCharacters(',')->suffixIcon('cash')->suffixIconColor('success')->required()->default(0)->minValue(0)->rules([
                                                fn(Get $get): Closure => function (string $attribute, $value, Closure $fail) use ($get) {
                                                    if ($get('debtor_foreign') == 0 && $get('creditor_foreign') == 0) {
                                                        $fail('Only one of these values can be zero.');
                                                    } elseif ($get('debtor_foreign') != 0 && $get('creditor_foreign') != 0) {
                                                        $fail('At least one of the values must be zero.');
                                                    }
                                                },
                                            ]),
                                        Forms\Components\TextInput::make('creditor_foreign')
                                            ->readOnly(fn(Get $get) => $get->getData()['type'] === "1")
                                            ->live(true)->afterStateUpdated(function ($state, Get $get, Forms\Set $set) {
                                                $set('creditor', number_format((float) str_replace(',', '', $state) * (float) str_replace(',', '', $get('exchange_rate'))));
                                            })->mask(RawJs::make('$money($input)'))->stripCharacters(',')->suffixIcon('cash')->suffixIconColor('success')->required()->default(0)->minValue(0)->rules([
                                                fn(Get $get): Closure => function (string $attribute, $value, Closure $fail) use ($get) {
                                                    if ($get('debtor_foreign') == 0 && $get('creditor_foreign') == 0) {
                                                        $fail('Only one of these values can be zero.');
                                                    } elseif ($get('debtor_foreign') != 0 && $get('creditor_foreign') != 0) {
                                                        $fail('At least one of the values must be zero.');
                                                    }
                                                },
                                            ]),
                                    ])->columns(4)->visible(function (Get $get) {
                                        return $get('isCurrency');
                                    }),
                                    Forms\Components\Checkbox::make('Cheque')->label('Cheque/Instalment')->inline()->live(),
                                    Forms\Components\Section::make([
                                        Forms\Components\Fieldset::make('cheque')->label('Cheque/Instalment')->relationship('cheque')->schema([
                                            Forms\Components\TextInput::make('cheque_number')->maxLength(255),
                                            Forms\Components\TextInput::make('amount')->default(function (Get $get) {
                                                if ($get('debtor') > 0) {
                                                    return $get('debtor');
                                                }
                                                else if ($get('creditor') > 0) {
                                                    return $get('creditor');
                                                } else {
                                                    return 0;
                                                }
                                            })->mask(RawJs::make('$money($input)'))->stripCharacters(',')->required()->numeric(),
                                            Forms\Components\DatePicker::make('issue_date')->default(now())->required(),
                                            Forms\Components\DatePicker::make('due_date')->required(),
                                            Forms\Components\TextInput::make('payer_name')->maxLength(255),
                                            Forms\Components\TextInput::make('payee_name')->maxLength(255),
                                            Forms\Components\TextInput::make('bank_name')->maxLength(255),
                                            Forms\Components\TextInput::make('branch_name')->maxLength(255),
                                            Forms\Components\Textarea::make('description')->columnSpanFull(),
                                            Forms\Components\ToggleButtons::make('type')->options([0 => 'Receivable', 1 => 'Payable'])->inline()->grouped()->required(),
                                            Forms\Components\Hidden::make('company_id')->default(getCompany()->id)
                                        ]),
                                    ])->collapsible()->persistCollapsed()->visible(fn(Forms\Get $get) => $get('Cheque')),
                                    Forms\Components\Hidden::make('financial_period_id')->required()->label('Financial Period')->default(getPeriod()?->id)
                                ])->minItems(1)->columns(5)->defaultItems(1)
                                    ->mutateRelationshipDataBeforecreateUsing(function (array $data): array {
                                        $data['user_id'] = auth()->id();
                                        $data['company_id'] = getCompany()->id;
                                        $data['period_id'] = FinancialPeriod::query()->where('company_id', getCompany()->id)->where('status', "During")->first()->id;
                                        return $data;
                                    })
                            ])->columns(1)->columnSpanFull()

                            // Forms\Components\Section::make([
                            //     Forms\Components\TextInput::make('number')
                            //         ->columnSpan(1)
                            //         ->default(getCompany()->financialPeriods()->where('status', "During")?->first()?->invoices()?->get()->last()?->number != null ? getCompany()->financialPeriods()->where('status', "During")->first()->invoices()->get()->last()->number + 1 : 1)->label('Voucher Number')->required()->maxLength(255)->readOnly(),
                            //     Forms\Components\TextInput::make('name')
                            //         ->columnSpan(3)
                            //         ->label('Voucher Title')->required()->maxLength(255),
                            //     Forms\Components\TextInput::make('reference')
                            //         ->columnSpan(1)
                            //         ->maxLength(255),
                            //     Forms\Components\DateTimePicker::make('date')
                            //         ->columnSpan(2)
                            //         ->required()->default(now()),
                            //     Forms\Components\FileUpload::make('document')->placeholder('Browse')->extraInputAttributes(['style' => 'height:30px!important;'])
                            //         ->nullable(),
                            //     Placeholder::make('total :')->live()->content(function (Get $get) {
                            //         if ($get->getData()['items']) {
                            //             $produtTotal = array_map(function ($item) {
                            //                 // dd($item);
                            //                 try {
                            //                     //code...
                            //                     // return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) + (($item['quantity'] * str_replace(',', '', $item['unit_price']) * $item['taxes']) / 100,2) + (($item['quantity'] * str_replace(',', '', $item['unit_price']) * $item['freights']) / 100,2));
                            //                     return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price'])) * $item['discount']) / 100);
                            //                 } catch (\Throwable $th) {
                            //                     //throw $th;
                            //                     return null;
                            //                 }
                            //             }, $get->getData()['items']);

                            //             return  collect($produtTotal)->sum() ? number_format(collect($produtTotal)->sum(), 2) : '?';
                            //         }
                            //     })->inlineLabel()
                            // ])->columns(8),

                            // Forms\Components\Section::make([
                            //     Forms\Components\Repeater::make('transactions')->label('')->relationship('transactions')->schema([
                            //         SelectTree::make('account_id')->defaultOpenLevel(3)->live()->label('Account')->required()->relationship('Account', 'name', 'parent_id', modifyQueryUsing: fn($query) => $query->where('level', '!=', 'control')->where('company_id', getCompany()->id))->searchable(),
                            //         Forms\Components\TextInput::make('description')->required(),

                            //         Forms\Components\Hidden::make('company_id')->default(getCompany()->id)->required(),
                            //         Forms\Components\TextInput::make('debtor')->default(0)->mask(RawJs::make('$money($input)'))->stripCharacters(',')->readOnly(fn(Get $get) => $get->getData()['type'] !== "1")
                            //             ->rules([
                            //                 fn(Get $get): Closure => function (string $attribute, $value, Closure $fail) use ($get) {

                            //                     if ($get->getData()['type'] === "1") {


                            //                         if ($get('debtor') == 0) {
                            //                             $fail('The debtor field must be not zero.');
                            //                         } else {

                            //                             // dd(()));
                            //                             $produtTotal = array_map(function ($item) {
                            //                                 // dd($item);
                            //                                 return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price'])) * $item['discount']) / 100);
                            //                             }, $get->getData()['items']);

                            //                             $invoiceTotal = array_map(function ($item) {
                            //                                 // dd($item);
                            //                                 return (str_replace(',', '', $item['debtor']));
                            //                             }, $get->getData()['invoice']['transactions']);

                            //                             $productSum = collect($produtTotal)->sum();
                            //                             $invoiceSum = collect($invoiceTotal)->sum();

                            //                             if ($invoiceSum != $productSum) {
                            //                                 $remainingAmount = $productSum - $invoiceSum;
                            //                                 $fail("The paid amount does not match the total price. Total amount:" . number_format($productSum, 2) . ", Remaining amount: " . number_format($remainingAmount, 2));
                            //                             }
                            //                         }
                            //                     } elseif ($get('debtor') != 0) {
                            //                         $fail('The debtor field must be zero.');
                            //                     }
                            //                 },
                            //             ]),
                            //         Forms\Components\TextInput::make('creditor')->default(0)->mask(RawJs::make('$money($input)'))->stripCharacters(',')->readOnly(fn(Get $get) => $get->getData()['type'] === "1")
                            //             ->afterStateUpdated(function ($state, Forms\Set $set) {
                            //                 $set('cheque.amount', $state);
                            //             })
                            //             ->mask(RawJs::make('$money($input)'))->stripCharacters(',')
                            //             ->mask(RawJs::make('$money($input)'))->stripCharacters(',')
                            //             ->suffixIcon('cash')->suffixIconColor('success')->required()->default(0)->minValue(0)
                            //             ->rules([
                            //                 fn(Get $get): Closure => function (string $attribute, $value, Closure $fail) use ($get) {

                            //                     if ($get->getData()['type'] !== "1") {


                            //                         if ($get('creditor') == 0) {
                            //                             $fail('The creditor field must be not zero.');
                            //                         } else {

                            //                             // dd(()));
                            //                             $produtTotal = array_map(function ($item) {
                            //                                 // dd($item);
                            //                                 return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price'])) * $item['discount']) / 100);
                            //                             }, $get->getData()['items']);

                            //                             $invoiceTotal = array_map(function ($item) {
                            //                                 // dd($item);
                            //                                 return (str_replace(',', '', $item['creditor']));
                            //                             }, $get->getData()['invoice']['transactions']);

                            //                             $productSum = collect($produtTotal)->sum();
                            //                             $invoiceSum = collect($invoiceTotal)->sum();

                            //                             if ($invoiceSum != $productSum) {
                            //                                 $remainingAmount = $productSum - $invoiceSum;
                            //                                 $fail("The paid amount does not match the total price. Total amount:" . number_format($productSum, 2) . ", Remaining amount: " . number_format($remainingAmount, 2));
                            //                             }
                            //                         }
                            //                     } elseif ($get('creditor') != 0) {
                            //                         $fail('The creditor field must be zero.');
                            //                     }
                            //                 },
                            //             ]),
                            //         Forms\Components\Checkbox::make('Cheque')->inline()->live(),
                            //         Forms\Components\Section::make([
                            //             Group::make()
                            //                 ->relationship('cheque')
                            //                 ->schema([
                            //                     Forms\Components\TextInput::make('cheque_number')->required()->maxLength(255),
                            //                     Forms\Components\TextInput::make('amount')->default(function (Get $get) {

                            //                         if ($get('debtor') > 0) {
                            //                             return $get('debtor');
                            //                         }
                            //                         if ($get('creditor') > 0) {
                            //                             return $get('creditor');
                            //                         }
                            //                     })->mask(RawJs::make('$money($input)'))->stripCharacters(',')->required()->numeric(),
                            //                     Forms\Components\DatePicker::make('issue_date')->required(),
                            //                     Forms\Components\DatePicker::make('due_date')->required(),
                            //                     Forms\Components\TextInput::make('payer_name')->required()->maxLength(255),
                            //                     Forms\Components\TextInput::make('payee_name')->required()->maxLength(255),
                            //                     Forms\Components\TextInput::make('bank_name')->maxLength(255),
                            //                     Forms\Components\TextInput::make('branch_name')->maxLength(255),
                            //                     Forms\Components\Textarea::make('description')->columnSpanFull(),
                            //                     Forms\Components\Hidden::make('type')->default(fn(Get $get) => (!$get->getData()['type']) ?? null)->required(),
                            //                     Forms\Components\Hidden::make('company_id')->default(getCompany()->id)
                            //                 ])->columns(2),
                            //         ])->collapsible()->persistCollapsed()->visible(fn(Forms\Get $get) => $get('Cheque')),
                            //         Forms\Components\Hidden::make('financial_period_id')->required()->label('Financial Period')
                            //             ->default(getPeriod()->id)
                            //     ])->columns(4)->defaultItems(1)
                            //         ->mutateRelationshipDataBeforecreateUsing(function (array $data): array {
                            //             $data['user_id'] = auth()->id();
                            //             $data['company_id'] = getCompany()->id;
                            //             $data['period_id'] = FinancialPeriod::query()->where('company_id', getCompany()->id)->where('status', "During")->first()->id;
                            //             return $data;
                            //         })
                            // ])->columns(1)->columnSpanFull()

                       

                    ])
                ])->columnSpanFull(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('title')
                    ->searchable(),
                Tables\Columns\TextColumn::make('party.name')->label('Vendor/Customer')
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('account.name')->label('Expense/Income')
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('from')
                    ->searchable(),
                Tables\Columns\TextColumn::make('to')
                    ->searchable(),
                Tables\Columns\TextColumn::make('type')
                    ->state(fn($record) => $record->type == "1" ? "Income" : "Expense")
                    ->badge()->color(fn($record) => $record->type == "1" ? "success" : "danger"),
                Tables\Columns\TextColumn::make('total')
                    ->state(fn($record) => number_format($record->items->map(fn($item) => (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price']) * $item['discount']) / 100)))?->sum(), 2))
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('created_at')->label('Date')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: false),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getForm(){
        return [

                Forms\Components\Wizard\Step::make('Invoice')->schema([
                    Forms\Components\Section::make([
                        Forms\Components\TextInput::make('title')->required()->maxLength(255),
                        Forms\Components\ToggleButtons::make('type')->live()->afterStateUpdated(function (Forms\Set $set, string $operation) {
                            $set('party_id', null);
                            $set('account_id', null);
                            $set('to', null);
                            $set('from', null);
                            if ($operation == "create") {
                                $set('invoice.transactions', []);
                            }
                            // dd($set);
                            // debtor
                            // creditor
                        })->required()->default(0)->boolean('Income', 'Expense')->grouped(),
                        Forms\Components\Select::make('account_id')->label(fn(Forms\Get $get) => $get('type') === "1" ? "Income Account" : "Expence Account")->searchable()->required()->options(function (Forms\Get $get) {
                            $type = $get('type') === "1" ? "Income" : "Expense";
                            // dd();
                            return getCompany()->accounts->whereIn('group', [$type])->pluck('name', 'id');
                        })->afterStateUpdated(function ($state, Forms\Set $set, Forms\Get $get) {
                            $party = Parties::query()->firstWhere('id', $state);
                            if ($get('type') !== "1") {
                                $set('to', getCompany()->AccountTitle);
                            } else {
                                $set('from', getCompany()->AccountTitle);
                            }
                        })->live(true),


                        Forms\Components\Select::make('party_id')->label(fn(Forms\Get $get) => $get('type') === "1" ? "Customer" : "Vendor")->searchable()->required()->options(function (Forms\Get $get) {
                            $type = $get('type') === "1" ? "customer" : "vendor";
                            return getCompany()->parties->whereIn('type', [$type, 'both'])->pluck('info', 'id');
                        })->createOptionUsing(function ($data){

                            if ($data['type'] === "vendor"){
                                $parentAccount=Account::query()->where('id',$data['parent_vendor'])->where('company_id',getCompany()->id)->first();
                                $check = Account::query()->where('code', $parentAccount->code . $data['account_code_vendor'])->where('company_id', getCompany()->id)->first();
                                if ($check) {
                                    Notification::make('error')->title('this Account Code Exist')->warning()->send();
                                    return;
                                }
                                $account = Account::query()->create([
                                    'currency_id' =>  $data['currency_id'],
                                    'name' =>  $data['name'],
                                    'type' => 'creditor',
                                    'code' =>  $parentAccount->code . $data['account_code_vendor'],
                                    'level' => 'detail',
                                    'parent_id' => $parentAccount->id,
                                    'group'=>'Liabilitie',
                                    'built_in' => false,
                                    'company_id' => getCompany()->id,
                                ]);
                                $data['account_vendor']=$account->id;

                            }elseif ($data['type'] === "customer"){
                                $parentAccount=Account::query()->where('id',$data['parent_customer'])->where('company_id',getCompany()->id)->first();
                                $check = Account::query()->where('code', $parentAccount->code . $data['account_code_customer'])->where('company_id', getCompany()->id)->first();
                                if ($check) {
                                    Notification::make('error')->title('this Account Code Exist')->warning()->send();
                                    return;
                                }
                                $account = Account::query()->create([
                                    'name' =>  $data['name'],
                                    'type' => 'debtor',
                                    'currency_id' =>  $data['currency_id'],
                                    'code' => $parentAccount->code . $data['account_code_customer'],
                                    'level' => 'detail',
                                    'parent_id' => $parentAccount->id,
                                    'group' => 'Asset',
                                    'built_in' => false,
                                    'company_id' => getCompany()->id,
                                ]);
                                $data['account_customer']=$account->id;

                            }else{
                                $parentAccount=Account::query()->where('id',$data['parent_vendor'])->where('company_id',getCompany()->id)->first();
                                $check = Account::query()->where('code', $parentAccount->code . $data['account_code_vendor'])->where('company_id', getCompany()->id)->first();
                                if ($check) {
                                    Notification::make('error')->title('this Account Code Exist')->warning()->send();
                                    return;
                                }
                                $account = Account::query()->create([
                                    'name' =>  $data['name'],
                                    'currency_id' =>  $data['currency_id'],
                                    'type' => 'creditor',
                                    'code' => $parentAccount->code . $data['account_code_vendor'],
                                    'level' => 'detail',
                                    'group'=>'Liabilitie',
                                    'parent_id' => $parentAccount->id,
                                    'built_in' => false,
                                    'company_id' => getCompany()->id,
                                    'Group'=>'Liabilitie'
                                ]);
                                $data['account_vendor']=$account->id;

                                $parentAccount=Account::query()->where('id',$data['parent_customer'])->where('company_id',getCompany()->id)->first();
                                $check = Account::query()->where('code', $parentAccount->code . $data['account_code_customer'])->where('company_id', getCompany()->id)->first();
                                if ($check) {
                                    Notification::make('error')->title('this Account Code Exist')->warning()->send();
                                    return;
                                }
                                $account = Account::query()->create([
                                    'name' =>  $data['name'],
                                    'currency_id' =>  $data['currency_id'],
                                    'type' => 'debtor',
                                    'code' => $parentAccount->code . $data['account_code_customer'],
                                    'level' => 'detail',
                                    'group' => 'Asset',
                                    'parent_id' => $parentAccount->id,
                                    'built_in' => false,
                                    'company_id' => getCompany()->id,
                                    'Group'=>'Asset'
                                ]);
                                $data['account_customer']=$account->id;
                            }
                            Parties::query()->create([
                                'name'=>$data['name'],
                                'type'=>$data['type'],
                                'address'=>$data['address'],
                                'phone'=>$data['phone'],
                                'email'=>$data['email'],
                                'account_vendor'=>isset($data['account_vendor'])? $data['account_vendor'] :null,
                                'account_customer'=>isset($data['account_customer'])?$data['account_customer']:null,
                                'company_id'=>getCompany()->id,
                                'currency_id'=>$data['currency_id'],
                                'account_code_vendor'=>isset($data['account_code_vendor']) ? $data['account_code_vendor']:null,
                                'account_code_customer'=>isset($data['account_code_customer'])? $data['account_code_customer']:null,
                            ]);
                             Notification::make('success')->success()->title('Submitted Successfully')->color('success')->send();
                        })->afterStateUpdated(function ($state, Forms\Set $set, Forms\Get $get) {
                            $party = Parties::query()->firstWhere('id', $state);
                            if ($get('type') === "1") {
                                $set('to', $party?->name);
                            } else {
                                $set('from', $party?->name);
                            }
                        })->live(true)->createOptionForm([
                            Forms\Components\Section::make([
                                Forms\Components\TextInput::make('name')->label('Company/Name')->required()->maxLength(255),
                                Forms\Components\TextInput::make('phone')->tel()->maxLength(255),
                                Forms\Components\TextInput::make('email')->email()->maxLength(255),
                                Forms\Components\Textarea::make('address')->columnSpanFull(),
                            ])->columns(3),
                            Section::make([
                                Forms\Components\ToggleButtons::make('type')->live()->grouped()->options(['vendor' => 'Vendor', 'customer' => 'Customer', 'both' => 'Both'])->inline()->required(),
                                Select::make('currency_id')->live()->model(Parties::class)->label('Currency')->default(defaultCurrency()?->id)->required()->relationship('currency', 'name', modifyQueryUsing: fn($query) => $query->where('company_id', getCompany()->id))->searchable()->preload()->createOptionForm([
                                    \Filament\Forms\Components\Section::make([
                                        TextInput::make('name')->required()->maxLength(255),
                                        TextInput::make('symbol')->required()->maxLength(255),
                                        TextInput::make('exchange_rate')->required()->numeric()->mask(RawJs::make('$money($input)'))->stripCharacters(','),
                                    ])->columns(3)
                                ])->createOptionUsing(function ($data) {
                                    $data['company_id'] = getCompany()->id;
                                    Notification::make('success')->title('success')->success()->send();
                                    return Currency::query()->create($data)->getKey();
                                })->editOptionForm([
                                    \Filament\Forms\Components\Section::make([
                                        TextInput::make('name')->required()->maxLength(255),
                                        TextInput::make('symbol')->required()->maxLength(255),
                                        TextInput::make('exchange_rate')->required()->numeric()->mask(RawJs::make('$money($input)'))->stripCharacters(','),
                                    ])->columns(3)
                                ]),
                                SelectTree::make('parent_vendor')->visible(function (Forms\Get $get) {

                                    if ($get('type') == "both") {
                                        if ($get("account_vendor")===null){
                                            return true;
                                        }
                                    } elseif ($get('type') == "vendor") {
                                        if ($get("account_vendor")===null){
                                            return true;
                                        }
                                    } else {
                                        return false;
                                    }

                                })->disabledOptions(function () {
                                    return Account::query()->where('level', 'detail')->where('company_id', getCompany()->id)->orWhereHas('transactions',function ($query){})->pluck('id')->toArray();
                                })->hidden(fn($operation) => (bool)$operation === "edit")->default(getCompany()?->vendor_account)->enableBranchNode()->model(Transaction::class)->defaultOpenLevel(3)->live()->label('Parent Vendor Account')->required()->relationship('Account', 'name', 'parent_id', modifyQueryUsing: fn($query) => $query->where('stamp', "Liabilities")->where('company_id', getCompany()->id)),

                                SelectTree::make('parent_customer')->visible(function (Forms\Get $get) {
                                    if ($get('type') == "both") {
                                        if ($get("account_customer")===null){
                                            return true;
                                        }
                                    } elseif ($get('type') == "customer") {
                                        if ($get("account_customer") === null) {
                                            return true;
                                        }
                                    } else {
                                        return false;
                                    }
                                })->default(getCompany()?->customer_account)->disabledOptions(function ($state, SelectTree $component) {
                                    return Account::query()->where('level', 'detail')->where('company_id', getCompany()->id)->orWhereHas('transactions',function ($query){})->pluck('id')->toArray();
                                })->enableBranchNode()->model(Transaction::class)->defaultOpenLevel(3)->live()->label('Parent Customer Account')->required()->relationship('Account', 'name', 'parent_id', modifyQueryUsing: fn($query) => $query->where('stamp', "Assets")->where('company_id', getCompany()->id)),
                                Forms\Components\TextInput::make('account_code_vendor')
                                    ->prefix(fn(Get $get)=>Account::find($get('parent_vendor'))?->code)
                                    ->default(function () {
                                        if (Parties::query()->where('company_id', getCompany()->id)->where('type', 'vendor')->latest()->first()) {
                                            return generateNextCode(Parties::query()->where('company_id', getCompany()->id)->where('type', 'vendor')->latest()->first()->account_code_vendor);
                                        } else {
                                            return "001";
                                        }

                                    })->unique('accounts','code',ignoreRecord: true)->visible(function (Forms\Get $get) {

                                        if ($get('type') == "both") {
                                            if ($get("account_vendor") === null) {
                                                return true;
                                            }
                                        } elseif ($get('type') == "vendor") {
                                            if ($get("account_vendor") === null) {
                                                return true;
                                            }
                                        } else {
                                            return false;
                                        }

                                    })->required()->maxLength(255),
                                Forms\Components\TextInput::make('account_code_customer')->unique('accounts','code',ignoreRecord: true)
                                    ->prefix(fn(Get $get)=>Account::find($get('parent_customer'))?->code)
                                    ->default(function () {
                                        if (Parties::query()->where('company_id', getCompany()->id)->where('type', 'customer')->latest()->first()) {
                                            return generateNextCode(Parties::query()->where('company_id', getCompany()->id)->where('type', 'customer')->latest()->first()->account_code_customer);
                                        } else {
                                            return "001";
                                        }

                                    })->visible(function (Forms\Get $get) {
                                        if ($get('type') === "both") {
                                            if ($get("account_customer") === null) {
                                                return true;
                                            }
                                        } elseif ($get('type') === "customer") {
                                            if ($get("account_customer") === null) {
                                                return true;
                                            }
                                        } else {
                                            return false;
                                        }
                                    })->required()->tel()->maxLength(255),
                            ])->columns()
                        ]),

                    ])->columns(2),
                    Forms\Components\TextInput::make('from')->required()->maxLength(255),
                    Forms\Components\TextInput::make('to')->required()->maxLength(255),
                    Forms\Components\Repeater::make('items')->required()->relationship('items')->schema([
                        Forms\Components\TextInput::make('title')->required()->label('Invoice Item')->columnSpan(2),
                        Forms\Components\TextInput::make('quantity')->default(1)->numeric()->live(true)->required()->label('Quantity')->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                            $count = $get('quantity') === null ? 0 : (float)$get('quantity');
                            $unitPrice = $get('unit_price') === null ?  0 : (float)str_replace(',', '', $get('unit_price'));
                            $discount = $get('discount') === null ?  0 : (float)$get('discount');
                            $set('total', number_format(($count * $unitPrice) - (($count * $unitPrice) * $discount) / 100, 2));
                        }),
                        Forms\Components\Select::make('unit_id')->label('Unit')->required()->options(Unit::query()->where('company_id', getCompany()->id)->pluck('title', 'id'))->searchable()->preload(),
                        Forms\Components\TextInput::make('unit_price')->prefix(defaultCurrency()?->symbol)->default(0)->rules([
                            fn(): Closure => function (string $attribute, $value, Closure $fail) {
                                if ($value <= 0) {
                                    $fail('The :attribute is invalid.');
                                }
                            },
                        ])->mask(RawJs::make('$money($input)'))->stripCharacters(',')->live(true)->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                            $count = $get('quantity') === null ? 0 : (float)$get('quantity');
                            $unitPrice = $get('unit_price') === null ?  0 : (float)str_replace(',', '', $get('unit_price'));
                            $discount = $get('discount') === null ?  0 : (float)$get('discount');
                            $set('total', number_format(($count * $unitPrice) - (($count * $unitPrice) * $discount) / 100, 2));
                        })->required()->label('Unit Price'),
                        Forms\Components\TextInput::make('discount')->numeric()->live(true)->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                            $count = $get('quantity') === null ? 0 : (float)$get('quantity');
                            $unitPrice = $get('unit_price') === null ?  0 : (float)str_replace(',', '', $get('unit_price'));
                            $discount = $get('discount') === null ?  0 : (float)$get('discount');
                            $set('total', number_format(($count * $unitPrice) - (($count * $unitPrice) * $discount) / 100, 2));
                        })->default(0)->required()->label('Discount'),
                        Forms\Components\TextInput::make('total')->prefix(defaultCurrency()?->symbol)->live()->readOnly()->default(0)->required()->label('Total'),
                    ])->columnSpanFull()->columns(7),
                ])->columns(2),
                Forms\Components\Wizard\Step::make('journal')->label('Journal Entry')->schema([

                    Group::make()->relationship('invoice')->schema([

                        Forms\Components\Hidden::make('company_id')->default(getCompany()->id)->required(),
                        Forms\Components\Section::make([
                            Forms\Components\TextInput::make('number')
                                ->columnSpan(1)
                                ->default(getCompany()->financialPeriods()->where('status', "During")?->first()?->invoices()?->get()->last()?->number != null ? getCompany()->financialPeriods()->where('status', "During")->first()->invoices()->get()->last()->number + 1 : 1)->label('Voucher Number')->required()->maxLength(255)->readOnly(),
                            Forms\Components\TextInput::make('name')
                                ->columnSpan(3)
                                ->label('Voucher Title')->required()->maxLength(255),
                            Forms\Components\TextInput::make('reference')
                                ->columnSpan(1)
                                ->maxLength(255),
                            Forms\Components\DateTimePicker::make('date')
                                ->columnSpan(2)
                                ->required()->default(now()),
                            Forms\Components\FileUpload::make('document')->placeholder('Browse')->extraInputAttributes(['style' => 'height:30px!important;'])
                                ->nullable(),
                            Placeholder::make('total :')->live()->content(function (Get $get) {
                                if ($get->getData()['items']) {
                                    $produtTotal = array_map(function ($item) {
                                        // dd($item);
                                        try {
                                            //code...
                                            // return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) + (($item['quantity'] * str_replace(',', '', $item['unit_price']) * $item['taxes']) / 100,2) + (($item['quantity'] * str_replace(',', '', $item['unit_price']) * $item['freights']) / 100,2));
                                            return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price'])) * $item['discount']) / 100);
                                        } catch (\Throwable $th) {
                                            //throw $th;
                                            return null;
                                        }
                                    }, $get->getData()['items']);

                                    return  collect($produtTotal)->sum() ? number_format(collect($produtTotal)->sum(), 2) . defaultCurrency()?->symbol : '?';
                                }
                            })->inlineLabel()
                        ])->columns(8),

                        Forms\Components\Section::make([
                            Forms\Components\Repeater::make('transactions')->label('')->relationship('transactions')->schema([
                                Forms\Components\Hidden::make('company_id')->default(getCompany()->id)->required(),
                                SelectTree::make('account_id')->formatStateUsing(function ($state, Forms\Set $set) {
                                    $account = Account::query()->where('id', $state)->whereNot('currency_id', defaultCurrency()?->id)->first();
                                    if ($account) {
                                        $set('currency_id', $account->currency_id);
                                        $set('exchange_rate', number_format($account->currency->exchange_rate));
                                        $set('isCurrency', 1);
                                        return $state;
                                    }
                                    $set('isCurrency', 0);
                                    return $state;
                                })->afterStateUpdated(function ($state, Forms\Set $set) {
                                    $query = Account::query()->find($state);
                                    // dd($query);
                                    if ($query) {
                                        if($query->type == 'debtor')
                                        {
                                            $set('cheque.type', 0);
                                        }else{
                                            $set('cheque.type', 1);
                                        }
                                        if ($query->has_cheque == 1) {
                                            $set('Cheque', true);
                                        } else {
                                            $set('Cheque', false);
                                        }
                                    } else {
                                        $set('Cheque', false);
                                    }
                                    $account = Account::query()->where('id', $state)->whereNot('currency_id', defaultCurrency()?->id)->first();
                                    if ($account) {
                                        $set('currency_id', $account->currency_id);
                                        $set('exchange_rate', number_format($account->currency->exchange_rate));
                                        return $set('isCurrency', 1);
                                    }
                                    return $set('isCurrency', 0);
                                })->live()->defaultOpenLevel(3)->live()->label('Account')->required()->relationship('Account', 'name', 'parent_id', modifyQueryUsing: fn($query) => $query->where('level', '!=', 'control')->where('company_id', getCompany()->id))->searchable(),
                                Forms\Components\TextInput::make('description')->required(),

                                Forms\Components\TextInput::make('debtor')->prefix(defaultCurrency()->symbol)->live(true)->afterStateUpdated(function ($state, Forms\Set $set, Get $get) {
                                    if ($get('Cheque')) {
                                        $set('cheque.amount', $state);
                                    }
                                })->mask(RawJs::make('$money($input)'))->readOnly(function (Get $get) {
                                    return $get('isCurrency') || $get->getData()['type'] !== "1";
                                })->stripCharacters(',')->suffixIcon('cash')->suffixIconColor('success')->required()->default(0)->minValue(0)
                                    ->rules([
                                        fn(Get $get): Closure => function (string $attribute, $value, Closure $fail,$operation) use ($get) {
                                            if ($operation == "create") {

                                                if ($get->getData()['type'] === "1") {


                                                    if ($get('debtor') == 0) {
                                                        $fail('The debtor field must be not zero.');
                                                    } else {

                                                        // dd(()));
                                                        $produtTotal = array_map(function ($item) {
                                                            // dd($item);
                                                            return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price'])) * $item['discount']) / 100);
                                                        }, $get->getData()['items']);

                                                        $invoiceTotal = array_map(function ($item) {
                                                            // dd($item);
                                                            return (str_replace(',', '', $item['debtor']));
                                                        }, $get->getData()['invoice']['transactions']);

                                                        $productSum = collect($produtTotal)->sum();
                                                        $invoiceSum = collect($invoiceTotal)->sum();

                                                        if ($invoiceSum != $productSum) {
                                                            $remainingAmount = $productSum - $invoiceSum;
                                                            $fail("The paid amount does not match the total price. Total amount:" . number_format($productSum, 2) . ", Remaining amount: " . number_format($remainingAmount, 2));
                                                        }
                                                    }
                                                } elseif ($get('debtor') != 0) {
                                                    $fail('The debtor field must be zero.');
                                                }

                                            } else {
                                                if ($get('debtor') == 0 && $get('creditor') == 0) {
                                                    $fail('Only one of these values can be zero.');
                                                } elseif ($get('debtor') != 0 && $get('creditor') != 0) {
                                                    $fail('At least one of the values must be zero.');
                                                }
                                            }
                                        }
                                        ,
                                    ]),
                                Forms\Components\TextInput::make('creditor')->prefix(defaultCurrency()->symbol)->readOnly(function (Get $get) {
                                    return $get('isCurrency') || $get->getData()['type'] === "1";
                                })->live(true)
                                    ->afterStateUpdated(function ($state, Forms\Set $set, Get $get) {
                                        if ($get('Cheque')) {
                                            $set('cheque.amount', $state);
                                        }
                                    })
                                    ->mask(RawJs::make('$money($input)'))->stripCharacters(',')
                                    ->suffixIcon('cash')->suffixIconColor('success')->required()->default(0)->minValue(0)
                                    ->rules([
                                        fn(Get $get): Closure => function (string $attribute, $value, Closure $fail ,$operation ) use ($get) {

                                            if ($operation == "create") {

                                                if ($get->getData()['type'] !== "1") {


                                                    if ($get('creditor') == 0) {
                                                        $fail('The creditor field must be not zero.');
                                                    } else {

                                                        // dd(()));
                                                        $produtTotal = array_map(function ($item) {
                                                            // dd($item);
                                                            return (($item['quantity'] * str_replace(',', '', $item['unit_price'])) - (($item['quantity'] * str_replace(',', '', $item['unit_price'])) * $item['discount']) / 100);
                                                        }, $get->getData()['items']);

                                                        $invoiceTotal = array_map(function ($item) {
                                                            // dd($item);
                                                            return (str_replace(',', '', $item['creditor']));
                                                        }, $get->getData()['invoice']['transactions']);

                                                        $productSum = collect($produtTotal)->sum();
                                                        $invoiceSum = collect($invoiceTotal)->sum();

                                                        if ($invoiceSum != $productSum) {
                                                            $remainingAmount = $productSum - $invoiceSum;
                                                            $fail("The paid amount does not match the total price. Total amount:" . number_format($productSum, 2) . ", Remaining amount: " . number_format($remainingAmount, 2));
                                                        }
                                                    }
                                                } elseif ($get('creditor') != 0) {
                                                    $fail('The creditor field must be zero.');
                                                }
                                            } else {
                                                if ($get('debtor') == 0 && $get('creditor') == 0) {
                                                    $fail('Only one of these values can be zero.');
                                                } elseif ($get('debtor') != 0 && $get('creditor') != 0) {
                                                    $fail('At least one of the values must be zero.');
                                                }
                                            }

                                        },
                                    ]),
                                Forms\Components\Hidden::make('isCurrency'),
                                Forms\Components\Hidden::make('currency_id')->default(defaultCurrency()?->id)->hidden(function (Get $get) {
                                    return $get('isCurrency');
                                }),
                                Section::make([
                                    Select::make('currency_id')->live()->label('Currency')->required()->relationship('currency', 'name', modifyQueryUsing: fn($query) => $query->where('company_id', getCompany()->id))->searchable()->preload()->createOptionForm([
                                        Section::make([
                                            TextInput::make('name')->required()->maxLength(255),
                                            TextInput::make('symbol')->required()->maxLength(255),
                                            TextInput::make('exchange_rate')->required()->numeric()->mask(RawJs::make('$money($input)'))->stripCharacters(','),
                                        ])->columns(3)
                                    ])->createOptionUsing(function ($data) {
                                        $data['company_id'] = getCompany()->id;
                                        Notification::make('success')->title('success')->success()->send();
                                        return Currency::query()->create($data)->getKey();
                                    })->editOptionForm([
                                        Section::make([
                                            TextInput::make('name')->required()->maxLength(255),
                                            TextInput::make('symbol')->required()->maxLength(255),
                                            TextInput::make('exchange_rate')->required()->numeric()->mask(RawJs::make('$money($input)'))->stripCharacters(','),
                                        ])->columns(3)
                                    ])->afterStateUpdated(function ($state, Forms\Set $set) {
                                        $currency = Currency::query()->firstWhere('id', $state);
                                        if ($currency) {
                                            $set('exchange_rate', $currency->exchange_rate);
                                        }
                                    })->editOptionAction(function ($state, Forms\Set $set) {
                                        $currency = Currency::query()->firstWhere('id', $state);
                                        if ($currency) {
                                            $set('exchange_rate', $currency->exchange_rate);
                                        }
                                    }),
                                    TextInput::make('exchange_rate')->default(defaultCurrency()->exchange_rate)->required()->mask(RawJs::make('$money($input)'))->stripCharacters(','),
                                    Forms\Components\TextInput::make('debtor_foreign')
                                        ->readOnly(fn(Get $get) => $get->getData()['type'] !== "1")
                                        ->live(true)->afterStateUpdated(function ($state, Get $get, Forms\Set $set) {
                                            $set('debtor', number_format((float) str_replace(',', '', $state) * (float) str_replace(',', '', $get('exchange_rate'))));
                                        })->mask(RawJs::make('$money($input)'))->stripCharacters(',')->suffixIcon('cash')->suffixIconColor('success')->required()->default(0)->minValue(0)->rules([
                                            fn(Get $get): Closure => function (string $attribute, $value, Closure $fail) use ($get) {
                                                if ($get('debtor_foreign') == 0 && $get('creditor_foreign') == 0) {
                                                    $fail('Only one of these values can be zero.');
                                                } elseif ($get('debtor_foreign') != 0 && $get('creditor_foreign') != 0) {
                                                    $fail('At least one of the values must be zero.');
                                                }
                                            },
                                        ]),
                                    Forms\Components\TextInput::make('creditor_foreign')
                                        ->readOnly(fn(Get $get) => $get->getData()['type'] === "1")
                                        ->live(true)->afterStateUpdated(function ($state, Get $get, Forms\Set $set) {
                                            $set('creditor', number_format((float) str_replace(',', '', $state) * (float) str_replace(',', '', $get('exchange_rate'))));
                                        })->mask(RawJs::make('$money($input)'))->stripCharacters(',')->suffixIcon('cash')->suffixIconColor('success')->required()->default(0)->minValue(0)->rules([
                                            fn(Get $get): Closure => function (string $attribute, $value, Closure $fail) use ($get) {
                                                if ($get('debtor_foreign') == 0 && $get('creditor_foreign') == 0) {
                                                    $fail('Only one of these values can be zero.');
                                                } elseif ($get('debtor_foreign') != 0 && $get('creditor_foreign') != 0) {
                                                    $fail('At least one of the values must be zero.');
                                                }
                                            },
                                        ]),
                                ])->columns(4)->visible(function (Get $get) {
                                    return $get('isCurrency');
                                }),
                                Forms\Components\Checkbox::make('Cheque')->label('Cheque/Instalment')->inline()->live(),
                                Forms\Components\Section::make([
                                    Forms\Components\Fieldset::make('cheque')->label('Cheque/Instalment')->relationship('cheque')->schema([
                                        Forms\Components\TextInput::make('cheque_number')->maxLength(255),
                                        Forms\Components\TextInput::make('amount')->default(function (Get $get) {
                                            if ($get('debtor') > 0) {
                                                return $get('debtor');
                                            }
                                            if ($get('creditor') > 0) {
                                                return $get('creditor');
                                            } else {
                                                return 0;
                                            }
                                        })->mask(RawJs::make('$money($input)'))->stripCharacters(',')->required()->numeric(),
                                        Forms\Components\DatePicker::make('issue_date')->default(now())->required(),
                                        Forms\Components\DatePicker::make('due_date')->required(),
                                        Forms\Components\TextInput::make('payer_name')->maxLength(255),
                                        Forms\Components\TextInput::make('payee_name')->maxLength(255),
                                        Forms\Components\TextInput::make('bank_name')->maxLength(255),
                                        Forms\Components\TextInput::make('branch_name')->maxLength(255),
                                        Forms\Components\Textarea::make('description')->columnSpanFull(),
                                        Forms\Components\ToggleButtons::make('type')->options([0 => 'Receivable', 1 => 'Payable'])->inline()->grouped()->required(),
                                        Forms\Components\Hidden::make('company_id')->default(getCompany()->id)
                                    ]),
                                ])->collapsible()->persistCollapsed()->visible(fn(Forms\Get $get) => $get('Cheque')),
                                Forms\Components\Hidden::make('financial_period_id')->required()->label('Financial Period')->default(getPeriod()?->id)
                            ])->minItems(1)->columns(5)->defaultItems(1)
                                ->mutateRelationshipDataBeforecreateUsing(function (array $data): array {
                                    $data['user_id'] = auth()->id();
                                    $data['company_id'] = getCompany()->id;
                                    $data['period_id'] = FinancialPeriod::query()->where('company_id', getCompany()->id)->where('status', "During")->first()->id;
                                    return $data;
                                })
                        ])->columns(1)->columnSpanFull()


                    ])
            ])->columnSpanFull(),
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListFactors::route('/'),
            'create' => Pages\CreateFactor::route('/create'),
            'edit' => Pages\EditFactor::route('/{record}/edit'),
        ];
    }
}
