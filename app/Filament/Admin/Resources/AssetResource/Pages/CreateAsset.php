<?php

namespace App\Filament\Admin\Resources\AssetResource\Pages;

use App\Filament\Admin\Resources\AssetResource;
use App\Models\PurchaseOrder;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;
use Filament\Support\Exceptions\Halt;
use Filament\Support\Facades\FilamentView;
use function Filament\Support\is_app_url;

class CreateAsset extends CreateRecord
{
    protected static string $resource = AssetResource::class;

    public function create(bool $another = false): void
    {
        $this->authorizeAccess();

        try {
            $this->beginDatabaseTransaction();

            $this->callHook('beforeValidate');

            $data = $this->form->getState();

            $this->callHook('afterValidate');

            $data = $this->mutateFormDataBeforeCreate($data);

            $this->callHook('beforeCreate');


            if (isset($data['purchase_order_id'])) {

               $PO= PurchaseOrder::find($data['purchase_order_id']);
               if ($PO->status==='Inventory'){
                   $PO->update([
                       'status' => "GRN And inventory",
                   ]);
               }else{
                   $PO->update([
                       'status' => "GRN",
                   ]);
               }
            }

            foreach ($data['assets'] as $asset) {

                $this->record = $this->handleRecordCreation($asset);

                $this->form->model($this->getRecord())->saveRelationships();

                $this->callHook('afterCreate');
            }


            $this->commitDatabaseTransaction();
        } catch (Halt $exception) {
            $exception->shouldRollbackDatabaseTransaction() ?
                $this->rollBackDatabaseTransaction() :
                $this->commitDatabaseTransaction();

            return;
        } catch (Throwable $exception) {
            $this->rollBackDatabaseTransaction();

            throw $exception;
        }

        $this->rememberData();

        $this->getCreatedNotification()?->send();

        if ($another) {
            // Ensure that the form record is anonymized so that relationships aren't loaded.
            $this->form->model($this->getRecord()::class);
            $this->record = null;

            $this->fillForm();

            return;
        }

        $redirectUrl = $this->getRedirectUrl();

        $this->redirect($redirectUrl, navigate: FilamentView::hasSpaMode() && is_app_url($redirectUrl));
    }

    protected function getRedirectUrl(): string
    {
        return  AssetResource::getUrl('index'); // TODO: Change the autogenerated stub
    }
}
